/*
Deployment script for AdventureWorksDW2014_Dev

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "AdventureWorksDW2014_Dev"
:setvar DefaultFilePrefix "AdventureWorksDW2014_Dev"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
PRINT N'Creating [Jan]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [Jan];


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [Jan_1F38B8A9], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Jan_1F38B8A9.mdf') TO FILEGROUP [Jan];


GO
PRINT N'Creating [Feb]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [Feb];


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [Feb_59A522BD], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Feb_59A522BD.mdf') TO FILEGROUP [Feb];


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [godfrey]...';


GO
CREATE USER [godfrey] FOR LOGIN [godfrey]
    WITH DEFAULT_SCHEMA = [db_owner];


GO
REVOKE CONNECT TO [godfrey];


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_owner', @membername = N'godfrey';


GO
PRINT N'Creating [dbo].[AdventureWorksDWBuildVersion]...';


GO
CREATE TABLE [dbo].[AdventureWorksDWBuildVersion] (
    [DBVersion]   NVARCHAR (50) NULL,
    [VersionDate] DATETIME      NULL
);


GO
PRINT N'Creating [dbo].[DatabaseLog]...';


GO
CREATE TABLE [dbo].[DatabaseLog] (
    [DatabaseLogID] INT            IDENTITY (1, 1) NOT NULL,
    [PostTime]      DATETIME       NOT NULL,
    [DatabaseUser]  [sysname]      NOT NULL,
    [Event]         [sysname]      NOT NULL,
    [Schema]        [sysname]      NULL,
    [Object]        [sysname]      NULL,
    [TSQL]          NVARCHAR (MAX) NOT NULL,
    [XmlEvent]      XML            NOT NULL,
    CONSTRAINT [PK_DatabaseLog_DatabaseLogID] PRIMARY KEY NONCLUSTERED ([DatabaseLogID] ASC)
);


GO
PRINT N'Creating [dbo].[DimAccount]...';


GO
CREATE TABLE [dbo].[DimAccount] (
    [AccountKey]                    INT            IDENTITY (1, 1) NOT NULL,
    [ParentAccountKey]              INT            NULL,
    [AccountCodeAlternateKey]       INT            NULL,
    [ParentAccountCodeAlternateKey] INT            NULL,
    [AccountDescription]            NVARCHAR (50)  NULL,
    [AccountType]                   NVARCHAR (50)  NULL,
    [Operator]                      NVARCHAR (50)  NULL,
    [CustomMembers]                 NVARCHAR (300) NULL,
    [ValueType]                     NVARCHAR (50)  NULL,
    [CustomMemberOptions]           NVARCHAR (200) NULL,
    CONSTRAINT [PK_DimAccount] PRIMARY KEY CLUSTERED ([AccountKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimCurrency]...';


GO
CREATE TABLE [dbo].[DimCurrency] (
    [CurrencyKey]          INT           IDENTITY (1, 1) NOT NULL,
    [CurrencyAlternateKey] NCHAR (3)     NOT NULL,
    [CurrencyName]         NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_DimCurrency_CurrencyKey] PRIMARY KEY CLUSTERED ([CurrencyKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimCurrency].[AK_DimCurrency_CurrencyAlternateKey]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [AK_DimCurrency_CurrencyAlternateKey]
    ON [dbo].[DimCurrency]([CurrencyAlternateKey] ASC);


GO
PRINT N'Creating [dbo].[DimCustomer]...';


GO
CREATE TABLE [dbo].[DimCustomer] (
    [CustomerKey]          INT            IDENTITY (1, 1) NOT NULL,
    [GeographyKey]         INT            NULL,
    [CustomerAlternateKey] NVARCHAR (15)  NOT NULL,
    [Title]                NVARCHAR (8)   NULL,
    [FirstName]            NVARCHAR (50)  NULL,
    [MiddleName]           NVARCHAR (50)  NULL,
    [LastName]             NVARCHAR (50)  NULL,
    [NameStyle]            BIT            NULL,
    [BirthDate]            DATE           NULL,
    [MaritalStatus]        NCHAR (1)      NULL,
    [Suffix]               NVARCHAR (10)  NULL,
    [Gender]               NVARCHAR (1)   NULL,
    [EmailAddress]         NVARCHAR (50)  NULL,
    [YearlyIncome]         MONEY          NULL,
    [TotalChildren]        TINYINT        NULL,
    [NumberChildrenAtHome] TINYINT        NULL,
    [EnglishEducation]     NVARCHAR (40)  NULL,
    [SpanishEducation]     NVARCHAR (40)  NULL,
    [FrenchEducation]      NVARCHAR (40)  NULL,
    [EnglishOccupation]    NVARCHAR (100) NULL,
    [SpanishOccupation]    NVARCHAR (100) NULL,
    [FrenchOccupation]     NVARCHAR (100) NULL,
    [HouseOwnerFlag]       NCHAR (1)      NULL,
    [NumberCarsOwned]      TINYINT        NULL,
    [AddressLine1]         NVARCHAR (120) NULL,
    [AddressLine2]         NVARCHAR (120) NULL,
    [Phone]                NVARCHAR (20)  NULL,
    [DateFirstPurchase]    DATE           NULL,
    [CommuteDistance]      NVARCHAR (15)  NULL,
    CONSTRAINT [PK_DimCustomer_CustomerKey] PRIMARY KEY CLUSTERED ([CustomerKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimCustomer].[IX_DimCustomer_CustomerAlternateKey]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_DimCustomer_CustomerAlternateKey]
    ON [dbo].[DimCustomer]([CustomerAlternateKey] ASC);


GO
PRINT N'Creating [dbo].[DimDate]...';


GO
CREATE TABLE [dbo].[DimDate] (
    [DateKey]              INT           NOT NULL,
    [FullDateAlternateKey] DATE          NOT NULL,
    [DayNumberOfWeek]      TINYINT       NOT NULL,
    [EnglishDayNameOfWeek] NVARCHAR (10) NOT NULL,
    [SpanishDayNameOfWeek] NVARCHAR (10) NOT NULL,
    [FrenchDayNameOfWeek]  NVARCHAR (10) NOT NULL,
    [DayNumberOfMonth]     TINYINT       NOT NULL,
    [DayNumberOfYear]      SMALLINT      NOT NULL,
    [WeekNumberOfYear]     TINYINT       NOT NULL,
    [EnglishMonthName]     NVARCHAR (10) NOT NULL,
    [SpanishMonthName]     NVARCHAR (10) NOT NULL,
    [FrenchMonthName]      NVARCHAR (10) NOT NULL,
    [MonthNumberOfYear]    TINYINT       NOT NULL,
    [CalendarQuarter]      TINYINT       NOT NULL,
    [CalendarYear]         SMALLINT      NOT NULL,
    [CalendarSemester]     TINYINT       NOT NULL,
    [FiscalQuarter]        TINYINT       NOT NULL,
    [FiscalYear]           SMALLINT      NOT NULL,
    [FiscalSemester]       TINYINT       NOT NULL,
    CONSTRAINT [PK_DimDate_DateKey] PRIMARY KEY CLUSTERED ([DateKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimDate].[AK_DimDate_FullDateAlternateKey]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [AK_DimDate_FullDateAlternateKey]
    ON [dbo].[DimDate]([FullDateAlternateKey] ASC);


GO
PRINT N'Creating [dbo].[DimDepartmentGroup]...';


GO
CREATE TABLE [dbo].[DimDepartmentGroup] (
    [DepartmentGroupKey]       INT           IDENTITY (1, 1) NOT NULL,
    [ParentDepartmentGroupKey] INT           NULL,
    [DepartmentGroupName]      NVARCHAR (50) NULL,
    CONSTRAINT [PK_DimDepartmentGroup] PRIMARY KEY CLUSTERED ([DepartmentGroupKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimEmployee]...';


GO
CREATE TABLE [dbo].[DimEmployee] (
    [EmployeeKey]                          INT             IDENTITY (1, 1) NOT NULL,
    [ParentEmployeeKey]                    INT             NULL,
    [EmployeeNationalIDAlternateKey]       NVARCHAR (15)   NULL,
    [ParentEmployeeNationalIDAlternateKey] NVARCHAR (15)   NULL,
    [SalesTerritoryKey]                    INT             NULL,
    [FirstName]                            NVARCHAR (50)   NOT NULL,
    [LastName]                             NVARCHAR (50)   NOT NULL,
    [MiddleName]                           NVARCHAR (50)   NULL,
    [NameStyle]                            BIT             NOT NULL,
    [Title]                                NVARCHAR (50)   NULL,
    [HireDate]                             DATE            NULL,
    [BirthDate]                            DATE            NULL,
    [LoginID]                              NVARCHAR (256)  NULL,
    [EmailAddress]                         NVARCHAR (50)   NULL,
    [Phone]                                NVARCHAR (25)   NULL,
    [MaritalStatus]                        NCHAR (1)       NULL,
    [EmergencyContactName]                 NVARCHAR (50)   NULL,
    [EmergencyContactPhone]                NVARCHAR (25)   NULL,
    [SalariedFlag]                         BIT             NULL,
    [Gender]                               NCHAR (1)       NULL,
    [PayFrequency]                         TINYINT         NULL,
    [BaseRate]                             MONEY           NULL,
    [VacationHours]                        SMALLINT        NULL,
    [SickLeaveHours]                       SMALLINT        NULL,
    [CurrentFlag]                          BIT             NOT NULL,
    [SalesPersonFlag]                      BIT             NOT NULL,
    [DepartmentName]                       NVARCHAR (50)   NULL,
    [StartDate]                            DATE            NULL,
    [EndDate]                              DATE            NULL,
    [Status]                               NVARCHAR (50)   NULL,
    [EmployeePhoto]                        VARBINARY (MAX) NULL,
    CONSTRAINT [PK_DimEmployee_EmployeeKey] PRIMARY KEY CLUSTERED ([EmployeeKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimGeography]...';


GO
CREATE TABLE [dbo].[DimGeography] (
    [GeographyKey]             INT           IDENTITY (1, 1) NOT NULL,
    [City]                     NVARCHAR (30) NULL,
    [StateProvinceCode]        NVARCHAR (3)  NULL,
    [StateProvinceName]        NVARCHAR (50) NULL,
    [CountryRegionCode]        NVARCHAR (3)  NULL,
    [EnglishCountryRegionName] NVARCHAR (50) NULL,
    [SpanishCountryRegionName] NVARCHAR (50) NULL,
    [FrenchCountryRegionName]  NVARCHAR (50) NULL,
    [PostalCode]               NVARCHAR (15) NULL,
    [SalesTerritoryKey]        INT           NULL,
    [IpAddressLocator]         NVARCHAR (15) NULL,
    CONSTRAINT [PK_DimGeography_GeographyKey] PRIMARY KEY CLUSTERED ([GeographyKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimOrganization]...';


GO
CREATE TABLE [dbo].[DimOrganization] (
    [OrganizationKey]       INT           IDENTITY (1, 1) NOT NULL,
    [ParentOrganizationKey] INT           NULL,
    [PercentageOfOwnership] NVARCHAR (16) NULL,
    [OrganizationName]      NVARCHAR (50) NULL,
    [CurrencyKey]           INT           NULL,
    CONSTRAINT [PK_DimOrganization] PRIMARY KEY CLUSTERED ([OrganizationKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimProduct]...';


GO
CREATE TABLE [dbo].[DimProduct] (
    [ProductKey]            INT             IDENTITY (1, 1) NOT NULL,
    [ProductAlternateKey]   NVARCHAR (25)   NULL,
    [ProductSubcategoryKey] INT             NULL,
    [WeightUnitMeasureCode] NCHAR (3)       NULL,
    [SizeUnitMeasureCode]   NCHAR (3)       NULL,
    [EnglishProductName]    NVARCHAR (50)   NOT NULL,
    [SpanishProductName]    NVARCHAR (50)   NOT NULL,
    [FrenchProductName]     NVARCHAR (50)   NOT NULL,
    [StandardCost]          MONEY           NULL,
    [FinishedGoodsFlag]     BIT             NOT NULL,
    [Color]                 NVARCHAR (15)   NOT NULL,
    [SafetyStockLevel]      SMALLINT        NULL,
    [ReorderPoint]          SMALLINT        NULL,
    [ListPrice]             MONEY           NULL,
    [Size]                  NVARCHAR (50)   NULL,
    [SizeRange]             NVARCHAR (50)   NULL,
    [Weight]                FLOAT (53)      NULL,
    [DaysToManufacture]     INT             NULL,
    [ProductLine]           NCHAR (2)       NULL,
    [DealerPrice]           MONEY           NULL,
    [Class]                 NCHAR (2)       NULL,
    [Style]                 NCHAR (2)       NULL,
    [ModelName]             NVARCHAR (50)   NULL,
    [LargePhoto]            VARBINARY (MAX) NULL,
    [EnglishDescription]    NVARCHAR (400)  NULL,
    [FrenchDescription]     NVARCHAR (400)  NULL,
    [ChineseDescription]    NVARCHAR (400)  NULL,
    [ArabicDescription]     NVARCHAR (400)  NULL,
    [HebrewDescription]     NVARCHAR (400)  NULL,
    [ThaiDescription]       NVARCHAR (400)  NULL,
    [GermanDescription]     NVARCHAR (400)  NULL,
    [JapaneseDescription]   NVARCHAR (400)  NULL,
    [TurkishDescription]    NVARCHAR (400)  NULL,
    [StartDate]             DATETIME        NULL,
    [EndDate]               DATETIME        NULL,
    [Status]                NVARCHAR (7)    NULL,
    CONSTRAINT [PK_DimProduct_ProductKey] PRIMARY KEY CLUSTERED ([ProductKey] ASC),
    CONSTRAINT [AK_DimProduct_ProductAlternateKey_StartDate] UNIQUE NONCLUSTERED ([ProductAlternateKey] ASC, [StartDate] ASC)
);


GO
PRINT N'Creating [dbo].[DimProductCategory]...';


GO
CREATE TABLE [dbo].[DimProductCategory] (
    [ProductCategoryKey]          INT           IDENTITY (1, 1) NOT NULL,
    [ProductCategoryAlternateKey] INT           NULL,
    [EnglishProductCategoryName]  NVARCHAR (50) NOT NULL,
    [SpanishProductCategoryName]  NVARCHAR (50) NOT NULL,
    [FrenchProductCategoryName]   NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_DimProductCategory_ProductCategoryKey] PRIMARY KEY CLUSTERED ([ProductCategoryKey] ASC),
    CONSTRAINT [AK_DimProductCategory_ProductCategoryAlternateKey] UNIQUE NONCLUSTERED ([ProductCategoryAlternateKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimProductSubcategory]...';


GO
CREATE TABLE [dbo].[DimProductSubcategory] (
    [ProductSubcategoryKey]          INT           IDENTITY (1, 1) NOT NULL,
    [ProductSubcategoryAlternateKey] INT           NULL,
    [EnglishProductSubcategoryName]  NVARCHAR (50) NOT NULL,
    [SpanishProductSubcategoryName]  NVARCHAR (50) NOT NULL,
    [FrenchProductSubcategoryName]   NVARCHAR (50) NOT NULL,
    [ProductCategoryKey]             INT           NULL,
    CONSTRAINT [PK_DimProductSubcategory_ProductSubcategoryKey] PRIMARY KEY CLUSTERED ([ProductSubcategoryKey] ASC),
    CONSTRAINT [AK_DimProductSubcategory_ProductSubcategoryAlternateKey] UNIQUE NONCLUSTERED ([ProductSubcategoryAlternateKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimPromotion]...';


GO
CREATE TABLE [dbo].[DimPromotion] (
    [PromotionKey]             INT            IDENTITY (1, 1) NOT NULL,
    [PromotionAlternateKey]    INT            NULL,
    [EnglishPromotionName]     NVARCHAR (255) NULL,
    [SpanishPromotionName]     NVARCHAR (255) NULL,
    [FrenchPromotionName]      NVARCHAR (255) NULL,
    [DiscountPct]              FLOAT (53)     NULL,
    [EnglishPromotionType]     NVARCHAR (50)  NULL,
    [SpanishPromotionType]     NVARCHAR (50)  NULL,
    [FrenchPromotionType]      NVARCHAR (50)  NULL,
    [EnglishPromotionCategory] NVARCHAR (50)  NULL,
    [SpanishPromotionCategory] NVARCHAR (50)  NULL,
    [FrenchPromotionCategory]  NVARCHAR (50)  NULL,
    [StartDate]                DATETIME       NOT NULL,
    [EndDate]                  DATETIME       NULL,
    [MinQty]                   INT            NULL,
    [MaxQty]                   INT            NULL,
    CONSTRAINT [PK_DimPromotion_PromotionKey] PRIMARY KEY CLUSTERED ([PromotionKey] ASC),
    CONSTRAINT [AK_DimPromotion_PromotionAlternateKey] UNIQUE NONCLUSTERED ([PromotionAlternateKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimReseller]...';


GO
CREATE TABLE [dbo].[DimReseller] (
    [ResellerKey]          INT           IDENTITY (1, 1) NOT NULL,
    [GeographyKey]         INT           NULL,
    [ResellerAlternateKey] NVARCHAR (15) NULL,
    [Phone]                NVARCHAR (25) NULL,
    [BusinessType]         VARCHAR (20)  NOT NULL,
    [ResellerName]         NVARCHAR (50) NOT NULL,
    [NumberEmployees]      INT           NULL,
    [OrderFrequency]       CHAR (1)      NULL,
    [OrderMonth]           TINYINT       NULL,
    [FirstOrderYear]       INT           NULL,
    [LastOrderYear]        INT           NULL,
    [ProductLine]          NVARCHAR (50) NULL,
    [AddressLine1]         NVARCHAR (60) NULL,
    [AddressLine2]         NVARCHAR (60) NULL,
    [AnnualSales]          MONEY         NULL,
    [BankName]             NVARCHAR (50) NULL,
    [MinPaymentType]       TINYINT       NULL,
    [MinPaymentAmount]     MONEY         NULL,
    [AnnualRevenue]        MONEY         NULL,
    [YearOpened]           INT           NULL,
    CONSTRAINT [PK_DimReseller_ResellerKey] PRIMARY KEY CLUSTERED ([ResellerKey] ASC),
    CONSTRAINT [AK_DimReseller_ResellerAlternateKey] UNIQUE NONCLUSTERED ([ResellerAlternateKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimSalesReason]...';


GO
CREATE TABLE [dbo].[DimSalesReason] (
    [SalesReasonKey]          INT           IDENTITY (1, 1) NOT NULL,
    [SalesReasonAlternateKey] INT           NOT NULL,
    [SalesReasonName]         NVARCHAR (50) NOT NULL,
    [SalesReasonReasonType]   NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_DimSalesReason_SalesReasonKey] PRIMARY KEY CLUSTERED ([SalesReasonKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimSalesTerritory]...';


GO
CREATE TABLE [dbo].[DimSalesTerritory] (
    [SalesTerritoryKey]          INT             IDENTITY (1, 1) NOT NULL,
    [SalesTerritoryAlternateKey] INT             NULL,
    [SalesTerritoryRegion]       NVARCHAR (50)   NOT NULL,
    [SalesTerritoryCountry]      NVARCHAR (50)   NOT NULL,
    [SalesTerritoryGroup]        NVARCHAR (50)   NULL,
    [SalesTerritoryImage]        VARBINARY (MAX) NULL,
    CONSTRAINT [PK_DimSalesTerritory_SalesTerritoryKey] PRIMARY KEY CLUSTERED ([SalesTerritoryKey] ASC),
    CONSTRAINT [AK_DimSalesTerritory_SalesTerritoryAlternateKey] UNIQUE NONCLUSTERED ([SalesTerritoryAlternateKey] ASC)
);


GO
PRINT N'Creating [dbo].[DimScenario]...';


GO
CREATE TABLE [dbo].[DimScenario] (
    [ScenarioKey]  INT           IDENTITY (1, 1) NOT NULL,
    [ScenarioName] NVARCHAR (50) NULL,
    CONSTRAINT [PK_DimScenario] PRIMARY KEY CLUSTERED ([ScenarioKey] ASC)
);


GO
PRINT N'Creating [dbo].[EmpSalary]...';


GO
CREATE TABLE [dbo].[EmpSalary] (
    [Department] NCHAR (10) NULL,
    [EmpName]    NCHAR (10) NULL,
    [Salary]     INT        NULL
);


GO
PRINT N'Creating [dbo].[FactAdditionalInternationalProductDescription]...';


GO
CREATE TABLE [dbo].[FactAdditionalInternationalProductDescription] (
    [ProductKey]         INT            NOT NULL,
    [CultureName]        NVARCHAR (50)  NOT NULL,
    [ProductDescription] NVARCHAR (MAX) NOT NULL,
    CONSTRAINT [PK_FactAdditionalInternationalProductDescription_ProductKey_CultureName] PRIMARY KEY CLUSTERED ([ProductKey] ASC, [CultureName] ASC)
);


GO
PRINT N'Creating [dbo].[FactCallCenter]...';


GO
CREATE TABLE [dbo].[FactCallCenter] (
    [FactCallCenterID]    INT           IDENTITY (1, 1) NOT NULL,
    [DateKey]             INT           NOT NULL,
    [WageType]            NVARCHAR (15) NOT NULL,
    [Shift]               NVARCHAR (20) NOT NULL,
    [LevelOneOperators]   SMALLINT      NOT NULL,
    [LevelTwoOperators]   SMALLINT      NOT NULL,
    [TotalOperators]      SMALLINT      NOT NULL,
    [Calls]               INT           NOT NULL,
    [AutomaticResponses]  INT           NOT NULL,
    [Orders]              INT           NOT NULL,
    [IssuesRaised]        SMALLINT      NOT NULL,
    [AverageTimePerIssue] SMALLINT      NOT NULL,
    [ServiceGrade]        FLOAT (53)    NOT NULL,
    [Date]                DATETIME      NULL,
    CONSTRAINT [PK_FactCallCenter_FactCallCenterID] PRIMARY KEY CLUSTERED ([FactCallCenterID] ASC),
    CONSTRAINT [AK_FactCallCenter_DateKey_Shift] UNIQUE NONCLUSTERED ([DateKey] ASC, [Shift] ASC)
);


GO
PRINT N'Creating [dbo].[FactCurrencyRate]...';


GO
CREATE TABLE [dbo].[FactCurrencyRate] (
    [CurrencyKey]  INT        NOT NULL,
    [DateKey]      INT        NOT NULL,
    [AverageRate]  FLOAT (53) NOT NULL,
    [EndOfDayRate] FLOAT (53) NOT NULL,
    [Date]         DATETIME   NULL,
    CONSTRAINT [PK_FactCurrencyRate_CurrencyKey_DateKey] PRIMARY KEY CLUSTERED ([CurrencyKey] ASC, [DateKey] ASC)
);


GO
PRINT N'Creating [dbo].[FactFinance]...';


GO
CREATE TABLE [dbo].[FactFinance] (
    [FinanceKey]         INT        IDENTITY (1, 1) NOT NULL,
    [DateKey]            INT        NOT NULL,
    [OrganizationKey]    INT        NOT NULL,
    [DepartmentGroupKey] INT        NOT NULL,
    [ScenarioKey]        INT        NOT NULL,
    [AccountKey]         INT        NOT NULL,
    [Amount]             FLOAT (53) NOT NULL,
    [Date]               DATETIME   NULL
);


GO
PRINT N'Creating [dbo].[FactInternetSales]...';


GO
CREATE TABLE [dbo].[FactInternetSales] (
    [ProductKey]            INT           NOT NULL,
    [OrderDateKey]          INT           NOT NULL,
    [DueDateKey]            INT           NOT NULL,
    [ShipDateKey]           INT           NOT NULL,
    [CustomerKey]           INT           NOT NULL,
    [PromotionKey]          INT           NOT NULL,
    [CurrencyKey]           INT           NOT NULL,
    [SalesTerritoryKey]     INT           NOT NULL,
    [SalesOrderNumber]      NVARCHAR (20) NOT NULL,
    [SalesOrderLineNumber]  TINYINT       NOT NULL,
    [RevisionNumber]        TINYINT       NOT NULL,
    [OrderQuantity]         SMALLINT      NOT NULL,
    [UnitPrice]             MONEY         NOT NULL,
    [ExtendedAmount]        MONEY         NOT NULL,
    [UnitPriceDiscountPct]  FLOAT (53)    NOT NULL,
    [DiscountAmount]        FLOAT (53)    NOT NULL,
    [ProductStandardCost]   MONEY         NOT NULL,
    [TotalProductCost]      MONEY         NOT NULL,
    [SalesAmount]           MONEY         NOT NULL,
    [TaxAmt]                MONEY         NOT NULL,
    [Freight]               MONEY         NOT NULL,
    [CarrierTrackingNumber] NVARCHAR (25) NULL,
    [CustomerPONumber]      NVARCHAR (25) NULL,
    [OrderDate]             DATETIME      NULL,
    [DueDate]               DATETIME      NULL,
    [ShipDate]              DATETIME      NULL,
    CONSTRAINT [PK_FactInternetSales_SalesOrderNumber_SalesOrderLineNumber] PRIMARY KEY CLUSTERED ([SalesOrderNumber] ASC, [SalesOrderLineNumber] ASC)
);


GO
PRINT N'Creating [dbo].[FactInternetSalesReason]...';


GO
CREATE TABLE [dbo].[FactInternetSalesReason] (
    [SalesOrderNumber]     NVARCHAR (20) NOT NULL,
    [SalesOrderLineNumber] TINYINT       NOT NULL,
    [SalesReasonKey]       INT           NOT NULL,
    CONSTRAINT [PK_FactInternetSalesReason_SalesOrderNumber_SalesOrderLineNumber_SalesReasonKey] PRIMARY KEY CLUSTERED ([SalesOrderNumber] ASC, [SalesOrderLineNumber] ASC, [SalesReasonKey] ASC)
);


GO
PRINT N'Creating [dbo].[FactProductInventory]...';


GO
CREATE TABLE [dbo].[FactProductInventory] (
    [ProductKey]   INT   NOT NULL,
    [DateKey]      INT   NOT NULL,
    [MovementDate] DATE  NOT NULL,
    [UnitCost]     MONEY NOT NULL,
    [UnitsIn]      INT   NOT NULL,
    [UnitsOut]     INT   NOT NULL,
    [UnitsBalance] INT   NOT NULL,
    CONSTRAINT [PK_FactProductInventory] PRIMARY KEY CLUSTERED ([ProductKey] ASC, [DateKey] ASC)
);


GO
PRINT N'Creating [dbo].[FactResellerSales]...';


GO
CREATE TABLE [dbo].[FactResellerSales] (
    [ProductKey]            INT           NOT NULL,
    [OrderDateKey]          INT           NOT NULL,
    [DueDateKey]            INT           NOT NULL,
    [ShipDateKey]           INT           NOT NULL,
    [ResellerKey]           INT           NOT NULL,
    [EmployeeKey]           INT           NOT NULL,
    [PromotionKey]          INT           NOT NULL,
    [CurrencyKey]           INT           NOT NULL,
    [SalesTerritoryKey]     INT           NOT NULL,
    [SalesOrderNumber]      NVARCHAR (20) NOT NULL,
    [SalesOrderLineNumber]  TINYINT       NOT NULL,
    [RevisionNumber]        TINYINT       NULL,
    [OrderQuantity]         SMALLINT      NULL,
    [UnitPrice]             MONEY         NULL,
    [ExtendedAmount]        MONEY         NULL,
    [UnitPriceDiscountPct]  FLOAT (53)    NULL,
    [DiscountAmount]        FLOAT (53)    NULL,
    [ProductStandardCost]   MONEY         NULL,
    [TotalProductCost]      MONEY         NULL,
    [SalesAmount]           MONEY         NULL,
    [TaxAmt]                MONEY         NULL,
    [Freight]               MONEY         NULL,
    [CarrierTrackingNumber] NVARCHAR (25) NULL,
    [CustomerPONumber]      NVARCHAR (25) NULL,
    [OrderDate]             DATETIME      NULL,
    [DueDate]               DATETIME      NULL,
    [ShipDate]              DATETIME      NULL,
    CONSTRAINT [PK_FactResellerSales_SalesOrderNumber_SalesOrderLineNumber] PRIMARY KEY CLUSTERED ([SalesOrderNumber] ASC, [SalesOrderLineNumber] ASC)
);


GO
PRINT N'Creating [dbo].[FactSalesQuota]...';


GO
CREATE TABLE [dbo].[FactSalesQuota] (
    [SalesQuotaKey]    INT      IDENTITY (1, 1) NOT NULL,
    [EmployeeKey]      INT      NOT NULL,
    [DateKey]          INT      NOT NULL,
    [CalendarYear]     SMALLINT NOT NULL,
    [CalendarQuarter]  TINYINT  NOT NULL,
    [SalesAmountQuota] MONEY    NOT NULL,
    [Date]             DATETIME NULL,
    CONSTRAINT [PK_FactSalesQuota_SalesQuotaKey] PRIMARY KEY CLUSTERED ([SalesQuotaKey] ASC)
);


GO
PRINT N'Creating [dbo].[FactSurveyResponse]...';


GO
CREATE TABLE [dbo].[FactSurveyResponse] (
    [SurveyResponseKey]             INT           IDENTITY (1, 1) NOT NULL,
    [DateKey]                       INT           NOT NULL,
    [CustomerKey]                   INT           NOT NULL,
    [ProductCategoryKey]            INT           NOT NULL,
    [EnglishProductCategoryName]    NVARCHAR (50) NOT NULL,
    [ProductSubcategoryKey]         INT           NOT NULL,
    [EnglishProductSubcategoryName] NVARCHAR (50) NOT NULL,
    [Date]                          DATETIME      NULL,
    CONSTRAINT [PK_FactSurveyResponse_SurveyResponseKey] PRIMARY KEY CLUSTERED ([SurveyResponseKey] ASC)
);


GO
PRINT N'Creating [dbo].[NewFactCurrencyRate]...';


GO
CREATE TABLE [dbo].[NewFactCurrencyRate] (
    [AverageRate]  REAL         NULL,
    [CurrencyID]   NVARCHAR (3) NULL,
    [CurrencyDate] DATE         NULL,
    [EndOfDayRate] REAL         NULL,
    [CurrencyKey]  INT          NULL,
    [DateKey]      INT          NULL
);


GO
PRINT N'Creating [dbo].[ProspectiveBuyer]...';


GO
CREATE TABLE [dbo].[ProspectiveBuyer] (
    [ProspectiveBuyerKey]  INT            IDENTITY (1, 1) NOT NULL,
    [ProspectAlternateKey] NVARCHAR (15)  NULL,
    [FirstName]            NVARCHAR (50)  NULL,
    [MiddleName]           NVARCHAR (50)  NULL,
    [LastName]             NVARCHAR (50)  NULL,
    [BirthDate]            DATETIME       NULL,
    [MaritalStatus]        NCHAR (1)      NULL,
    [Gender]               NVARCHAR (1)   NULL,
    [EmailAddress]         NVARCHAR (50)  NULL,
    [YearlyIncome]         MONEY          NULL,
    [TotalChildren]        TINYINT        NULL,
    [NumberChildrenAtHome] TINYINT        NULL,
    [Education]            NVARCHAR (40)  NULL,
    [Occupation]           NVARCHAR (100) NULL,
    [HouseOwnerFlag]       NCHAR (1)      NULL,
    [NumberCarsOwned]      TINYINT        NULL,
    [AddressLine1]         NVARCHAR (120) NULL,
    [AddressLine2]         NVARCHAR (120) NULL,
    [City]                 NVARCHAR (30)  NULL,
    [StateProvinceCode]    NVARCHAR (3)   NULL,
    [PostalCode]           NVARCHAR (15)  NULL,
    [Phone]                NVARCHAR (20)  NULL,
    [Salutation]           NVARCHAR (8)   NULL,
    [Unknown]              INT            NULL,
    CONSTRAINT [PK_ProspectiveBuyer_ProspectiveBuyerKey] PRIMARY KEY CLUSTERED ([ProspectiveBuyerKey] ASC)
);


GO
PRINT N'Creating [dbo].[FK_DimAccount_DimAccount]...';


GO
ALTER TABLE [dbo].[DimAccount]
    ADD CONSTRAINT [FK_DimAccount_DimAccount] FOREIGN KEY ([ParentAccountKey]) REFERENCES [dbo].[DimAccount] ([AccountKey]);


GO
PRINT N'Creating [dbo].[FK_DimCustomer_DimGeography]...';


GO
ALTER TABLE [dbo].[DimCustomer]
    ADD CONSTRAINT [FK_DimCustomer_DimGeography] FOREIGN KEY ([GeographyKey]) REFERENCES [dbo].[DimGeography] ([GeographyKey]);


GO
PRINT N'Creating [dbo].[FK_DimDepartmentGroup_DimDepartmentGroup]...';


GO
ALTER TABLE [dbo].[DimDepartmentGroup]
    ADD CONSTRAINT [FK_DimDepartmentGroup_DimDepartmentGroup] FOREIGN KEY ([ParentDepartmentGroupKey]) REFERENCES [dbo].[DimDepartmentGroup] ([DepartmentGroupKey]);


GO
PRINT N'Creating [dbo].[FK_DimEmployee_DimEmployee]...';


GO
ALTER TABLE [dbo].[DimEmployee]
    ADD CONSTRAINT [FK_DimEmployee_DimEmployee] FOREIGN KEY ([ParentEmployeeKey]) REFERENCES [dbo].[DimEmployee] ([EmployeeKey]);


GO
PRINT N'Creating [dbo].[FK_DimEmployee_DimSalesTerritory]...';


GO
ALTER TABLE [dbo].[DimEmployee]
    ADD CONSTRAINT [FK_DimEmployee_DimSalesTerritory] FOREIGN KEY ([SalesTerritoryKey]) REFERENCES [dbo].[DimSalesTerritory] ([SalesTerritoryKey]);


GO
PRINT N'Creating [dbo].[FK_DimGeography_DimSalesTerritory]...';


GO
ALTER TABLE [dbo].[DimGeography]
    ADD CONSTRAINT [FK_DimGeography_DimSalesTerritory] FOREIGN KEY ([SalesTerritoryKey]) REFERENCES [dbo].[DimSalesTerritory] ([SalesTerritoryKey]);


GO
PRINT N'Creating [dbo].[FK_DimOrganization_DimCurrency]...';


GO
ALTER TABLE [dbo].[DimOrganization]
    ADD CONSTRAINT [FK_DimOrganization_DimCurrency] FOREIGN KEY ([CurrencyKey]) REFERENCES [dbo].[DimCurrency] ([CurrencyKey]);


GO
PRINT N'Creating [dbo].[FK_DimOrganization_DimOrganization]...';


GO
ALTER TABLE [dbo].[DimOrganization]
    ADD CONSTRAINT [FK_DimOrganization_DimOrganization] FOREIGN KEY ([ParentOrganizationKey]) REFERENCES [dbo].[DimOrganization] ([OrganizationKey]);


GO
PRINT N'Creating [dbo].[FK_DimProduct_DimProductSubcategory]...';


GO
ALTER TABLE [dbo].[DimProduct]
    ADD CONSTRAINT [FK_DimProduct_DimProductSubcategory] FOREIGN KEY ([ProductSubcategoryKey]) REFERENCES [dbo].[DimProductSubcategory] ([ProductSubcategoryKey]);


GO
PRINT N'Creating [dbo].[FK_DimProductSubcategory_DimProductCategory]...';


GO
ALTER TABLE [dbo].[DimProductSubcategory]
    ADD CONSTRAINT [FK_DimProductSubcategory_DimProductCategory] FOREIGN KEY ([ProductCategoryKey]) REFERENCES [dbo].[DimProductCategory] ([ProductCategoryKey]);


GO
PRINT N'Creating [dbo].[FK_DimReseller_DimGeography]...';


GO
ALTER TABLE [dbo].[DimReseller]
    ADD CONSTRAINT [FK_DimReseller_DimGeography] FOREIGN KEY ([GeographyKey]) REFERENCES [dbo].[DimGeography] ([GeographyKey]);


GO
PRINT N'Creating [dbo].[FK_FactCallCenter_DimDate]...';


GO
ALTER TABLE [dbo].[FactCallCenter]
    ADD CONSTRAINT [FK_FactCallCenter_DimDate] FOREIGN KEY ([DateKey]) REFERENCES [dbo].[DimDate] ([DateKey]);


GO
PRINT N'Creating [dbo].[FK_FactCurrencyRate_DimCurrency]...';


GO
ALTER TABLE [dbo].[FactCurrencyRate]
    ADD CONSTRAINT [FK_FactCurrencyRate_DimCurrency] FOREIGN KEY ([CurrencyKey]) REFERENCES [dbo].[DimCurrency] ([CurrencyKey]);


GO
PRINT N'Creating [dbo].[FK_FactCurrencyRate_DimDate]...';


GO
ALTER TABLE [dbo].[FactCurrencyRate]
    ADD CONSTRAINT [FK_FactCurrencyRate_DimDate] FOREIGN KEY ([DateKey]) REFERENCES [dbo].[DimDate] ([DateKey]);


GO
PRINT N'Creating [dbo].[FK_FactFinance_DimAccount]...';


GO
ALTER TABLE [dbo].[FactFinance]
    ADD CONSTRAINT [FK_FactFinance_DimAccount] FOREIGN KEY ([AccountKey]) REFERENCES [dbo].[DimAccount] ([AccountKey]);


GO
PRINT N'Creating [dbo].[FK_FactFinance_DimDate]...';


GO
ALTER TABLE [dbo].[FactFinance]
    ADD CONSTRAINT [FK_FactFinance_DimDate] FOREIGN KEY ([DateKey]) REFERENCES [dbo].[DimDate] ([DateKey]);


GO
PRINT N'Creating [dbo].[FK_FactFinance_DimDepartmentGroup]...';


GO
ALTER TABLE [dbo].[FactFinance]
    ADD CONSTRAINT [FK_FactFinance_DimDepartmentGroup] FOREIGN KEY ([DepartmentGroupKey]) REFERENCES [dbo].[DimDepartmentGroup] ([DepartmentGroupKey]);


GO
PRINT N'Creating [dbo].[FK_FactFinance_DimOrganization]...';


GO
ALTER TABLE [dbo].[FactFinance]
    ADD CONSTRAINT [FK_FactFinance_DimOrganization] FOREIGN KEY ([OrganizationKey]) REFERENCES [dbo].[DimOrganization] ([OrganizationKey]);


GO
PRINT N'Creating [dbo].[FK_FactFinance_DimScenario]...';


GO
ALTER TABLE [dbo].[FactFinance]
    ADD CONSTRAINT [FK_FactFinance_DimScenario] FOREIGN KEY ([ScenarioKey]) REFERENCES [dbo].[DimScenario] ([ScenarioKey]);


GO
PRINT N'Creating [dbo].[FK_FactInternetSales_DimCurrency]...';


GO
ALTER TABLE [dbo].[FactInternetSales]
    ADD CONSTRAINT [FK_FactInternetSales_DimCurrency] FOREIGN KEY ([CurrencyKey]) REFERENCES [dbo].[DimCurrency] ([CurrencyKey]);


GO
PRINT N'Creating [dbo].[FK_FactInternetSales_DimCustomer]...';


GO
ALTER TABLE [dbo].[FactInternetSales]
    ADD CONSTRAINT [FK_FactInternetSales_DimCustomer] FOREIGN KEY ([CustomerKey]) REFERENCES [dbo].[DimCustomer] ([CustomerKey]);


GO
PRINT N'Creating [dbo].[FK_FactInternetSales_DimDate]...';


GO
ALTER TABLE [dbo].[FactInternetSales]
    ADD CONSTRAINT [FK_FactInternetSales_DimDate] FOREIGN KEY ([OrderDateKey]) REFERENCES [dbo].[DimDate] ([DateKey]);


GO
PRINT N'Creating [dbo].[FK_FactInternetSales_DimDate1]...';


GO
ALTER TABLE [dbo].[FactInternetSales]
    ADD CONSTRAINT [FK_FactInternetSales_DimDate1] FOREIGN KEY ([DueDateKey]) REFERENCES [dbo].[DimDate] ([DateKey]);


GO
PRINT N'Creating [dbo].[FK_FactInternetSales_DimDate2]...';


GO
ALTER TABLE [dbo].[FactInternetSales]
    ADD CONSTRAINT [FK_FactInternetSales_DimDate2] FOREIGN KEY ([ShipDateKey]) REFERENCES [dbo].[DimDate] ([DateKey]);


GO
PRINT N'Creating [dbo].[FK_FactInternetSales_DimProduct]...';


GO
ALTER TABLE [dbo].[FactInternetSales]
    ADD CONSTRAINT [FK_FactInternetSales_DimProduct] FOREIGN KEY ([ProductKey]) REFERENCES [dbo].[DimProduct] ([ProductKey]);


GO
PRINT N'Creating [dbo].[FK_FactInternetSales_DimPromotion]...';


GO
ALTER TABLE [dbo].[FactInternetSales]
    ADD CONSTRAINT [FK_FactInternetSales_DimPromotion] FOREIGN KEY ([PromotionKey]) REFERENCES [dbo].[DimPromotion] ([PromotionKey]);


GO
PRINT N'Creating [dbo].[FK_FactInternetSales_DimSalesTerritory]...';


GO
ALTER TABLE [dbo].[FactInternetSales]
    ADD CONSTRAINT [FK_FactInternetSales_DimSalesTerritory] FOREIGN KEY ([SalesTerritoryKey]) REFERENCES [dbo].[DimSalesTerritory] ([SalesTerritoryKey]);


GO
PRINT N'Creating [dbo].[FK_FactInternetSalesReason_DimSalesReason]...';


GO
ALTER TABLE [dbo].[FactInternetSalesReason]
    ADD CONSTRAINT [FK_FactInternetSalesReason_DimSalesReason] FOREIGN KEY ([SalesReasonKey]) REFERENCES [dbo].[DimSalesReason] ([SalesReasonKey]);


GO
PRINT N'Creating [dbo].[FK_FactInternetSalesReason_FactInternetSales]...';


GO
ALTER TABLE [dbo].[FactInternetSalesReason]
    ADD CONSTRAINT [FK_FactInternetSalesReason_FactInternetSales] FOREIGN KEY ([SalesOrderNumber], [SalesOrderLineNumber]) REFERENCES [dbo].[FactInternetSales] ([SalesOrderNumber], [SalesOrderLineNumber]);


GO
PRINT N'Creating [dbo].[FK_FactProductInventory_DimDate]...';


GO
ALTER TABLE [dbo].[FactProductInventory]
    ADD CONSTRAINT [FK_FactProductInventory_DimDate] FOREIGN KEY ([DateKey]) REFERENCES [dbo].[DimDate] ([DateKey]);


GO
PRINT N'Creating [dbo].[FK_FactProductInventory_DimProduct]...';


GO
ALTER TABLE [dbo].[FactProductInventory]
    ADD CONSTRAINT [FK_FactProductInventory_DimProduct] FOREIGN KEY ([ProductKey]) REFERENCES [dbo].[DimProduct] ([ProductKey]);


GO
PRINT N'Creating [dbo].[FK_FactResellerSales_DimCurrency]...';


GO
ALTER TABLE [dbo].[FactResellerSales]
    ADD CONSTRAINT [FK_FactResellerSales_DimCurrency] FOREIGN KEY ([CurrencyKey]) REFERENCES [dbo].[DimCurrency] ([CurrencyKey]);


GO
PRINT N'Creating [dbo].[FK_FactResellerSales_DimDate]...';


GO
ALTER TABLE [dbo].[FactResellerSales]
    ADD CONSTRAINT [FK_FactResellerSales_DimDate] FOREIGN KEY ([OrderDateKey]) REFERENCES [dbo].[DimDate] ([DateKey]);


GO
PRINT N'Creating [dbo].[FK_FactResellerSales_DimDate1]...';


GO
ALTER TABLE [dbo].[FactResellerSales]
    ADD CONSTRAINT [FK_FactResellerSales_DimDate1] FOREIGN KEY ([DueDateKey]) REFERENCES [dbo].[DimDate] ([DateKey]);


GO
PRINT N'Creating [dbo].[FK_FactResellerSales_DimDate2]...';


GO
ALTER TABLE [dbo].[FactResellerSales]
    ADD CONSTRAINT [FK_FactResellerSales_DimDate2] FOREIGN KEY ([ShipDateKey]) REFERENCES [dbo].[DimDate] ([DateKey]);


GO
PRINT N'Creating [dbo].[FK_FactResellerSales_DimEmployee]...';


GO
ALTER TABLE [dbo].[FactResellerSales]
    ADD CONSTRAINT [FK_FactResellerSales_DimEmployee] FOREIGN KEY ([EmployeeKey]) REFERENCES [dbo].[DimEmployee] ([EmployeeKey]);


GO
PRINT N'Creating [dbo].[FK_FactResellerSales_DimProduct]...';


GO
ALTER TABLE [dbo].[FactResellerSales]
    ADD CONSTRAINT [FK_FactResellerSales_DimProduct] FOREIGN KEY ([ProductKey]) REFERENCES [dbo].[DimProduct] ([ProductKey]);


GO
PRINT N'Creating [dbo].[FK_FactResellerSales_DimPromotion]...';


GO
ALTER TABLE [dbo].[FactResellerSales]
    ADD CONSTRAINT [FK_FactResellerSales_DimPromotion] FOREIGN KEY ([PromotionKey]) REFERENCES [dbo].[DimPromotion] ([PromotionKey]);


GO
PRINT N'Creating [dbo].[FK_FactResellerSales_DimReseller]...';


GO
ALTER TABLE [dbo].[FactResellerSales]
    ADD CONSTRAINT [FK_FactResellerSales_DimReseller] FOREIGN KEY ([ResellerKey]) REFERENCES [dbo].[DimReseller] ([ResellerKey]);


GO
PRINT N'Creating [dbo].[FK_FactResellerSales_DimSalesTerritory]...';


GO
ALTER TABLE [dbo].[FactResellerSales]
    ADD CONSTRAINT [FK_FactResellerSales_DimSalesTerritory] FOREIGN KEY ([SalesTerritoryKey]) REFERENCES [dbo].[DimSalesTerritory] ([SalesTerritoryKey]);


GO
PRINT N'Creating [dbo].[FK_FactSalesQuota_DimDate]...';


GO
ALTER TABLE [dbo].[FactSalesQuota]
    ADD CONSTRAINT [FK_FactSalesQuota_DimDate] FOREIGN KEY ([DateKey]) REFERENCES [dbo].[DimDate] ([DateKey]);


GO
PRINT N'Creating [dbo].[FK_FactSalesQuota_DimEmployee]...';


GO
ALTER TABLE [dbo].[FactSalesQuota]
    ADD CONSTRAINT [FK_FactSalesQuota_DimEmployee] FOREIGN KEY ([EmployeeKey]) REFERENCES [dbo].[DimEmployee] ([EmployeeKey]);


GO
PRINT N'Creating [dbo].[FK_FactSurveyResponse_CustomerKey]...';


GO
ALTER TABLE [dbo].[FactSurveyResponse]
    ADD CONSTRAINT [FK_FactSurveyResponse_CustomerKey] FOREIGN KEY ([CustomerKey]) REFERENCES [dbo].[DimCustomer] ([CustomerKey]);


GO
PRINT N'Creating [dbo].[FK_FactSurveyResponse_DateKey]...';


GO
ALTER TABLE [dbo].[FactSurveyResponse]
    ADD CONSTRAINT [FK_FactSurveyResponse_DateKey] FOREIGN KEY ([DateKey]) REFERENCES [dbo].[DimDate] ([DateKey]);


GO
PRINT N'Creating [dbo].[vDMPrep]...';


GO
-- vDMPrep will be used as a data source by the other data mining views.  
-- Uses DW data at customer, product, day, etc. granularity and
-- gets region, model, year, month, etc.
CREATE VIEW [dbo].[vDMPrep]
AS
    SELECT
        pc.[EnglishProductCategoryName]
        ,Coalesce(p.[ModelName], p.[EnglishProductName]) AS [Model]
        ,c.[CustomerKey]
        ,s.[SalesTerritoryGroup] AS [Region]
        ,CASE
            WHEN Month(GetDate()) < Month(c.[BirthDate])
                THEN DateDiff(yy,c.[BirthDate],GetDate()) - 1
            WHEN Month(GetDate()) = Month(c.[BirthDate])
            AND Day(GetDate()) < Day(c.[BirthDate])
                THEN DateDiff(yy,c.[BirthDate],GetDate()) - 1
            ELSE DateDiff(yy,c.[BirthDate],GetDate())
        END AS [Age]
        ,CASE
            WHEN c.[YearlyIncome] < 40000 THEN 'Low'
            WHEN c.[YearlyIncome] > 60000 THEN 'High'
            ELSE 'Moderate'
        END AS [IncomeGroup]
        ,d.[CalendarYear]
        ,d.[FiscalYear]
        ,d.[MonthNumberOfYear] AS [Month]
        ,f.[SalesOrderNumber] AS [OrderNumber]
        ,f.SalesOrderLineNumber AS LineNumber
        ,f.OrderQuantity AS Quantity
        ,f.ExtendedAmount AS Amount  
    FROM
        [dbo].[FactInternetSales] f
    INNER JOIN [dbo].[DimDate] d
        ON f.[OrderDateKey] = d.[DateKey]
    INNER JOIN [dbo].[DimProduct] p
        ON f.[ProductKey] = p.[ProductKey]
    INNER JOIN [dbo].[DimProductSubcategory] psc
        ON p.[ProductSubcategoryKey] = psc.[ProductSubcategoryKey]
    INNER JOIN [dbo].[DimProductCategory] pc
        ON psc.[ProductCategoryKey] = pc.[ProductCategoryKey]
    INNER JOIN [dbo].[DimCustomer] c
        ON f.[CustomerKey] = c.[CustomerKey]
    INNER JOIN [dbo].[DimGeography] g
        ON c.[GeographyKey] = g.[GeographyKey]
    INNER JOIN [dbo].[DimSalesTerritory] s
        ON g.[SalesTerritoryKey] = s.[SalesTerritoryKey] 
;
GO
PRINT N'Creating [dbo].[vTargetMail]...';


GO

-- vTargetMail supports targeted mailing data model
-- Uses vDMPrep to determine if a customer buys a bike and joins to DimCustomer
CREATE VIEW [dbo].[vTargetMail] 
AS
    SELECT
        c.[CustomerKey], 
        c.[GeographyKey], 
        c.[CustomerAlternateKey], 
        c.[Title], 
        c.[FirstName], 
        c.[MiddleName], 
        c.[LastName], 
        c.[NameStyle], 
        c.[BirthDate], 
        c.[MaritalStatus], 
        c.[Suffix], 
        c.[Gender], 
        c.[EmailAddress], 
        c.[YearlyIncome], 
        c.[TotalChildren], 
        c.[NumberChildrenAtHome], 
        c.[EnglishEducation], 
        c.[SpanishEducation], 
        c.[FrenchEducation], 
        c.[EnglishOccupation], 
        c.[SpanishOccupation], 
        c.[FrenchOccupation], 
        c.[HouseOwnerFlag], 
        c.[NumberCarsOwned], 
        c.[AddressLine1], 
        c.[AddressLine2], 
        c.[Phone], 
        c.[DateFirstPurchase], 
        c.[CommuteDistance], 
        x.[Region], 
        x.[Age], 
        CASE x.[Bikes] 
            WHEN 0 THEN 0 
            ELSE 1 
        END AS [BikeBuyer]
    FROM
        [dbo].[DimCustomer] c INNER JOIN (
            SELECT
                [CustomerKey]
                ,[Region]
                ,[Age]
                ,Sum(
                    CASE [EnglishProductCategoryName] 
                        WHEN 'Bikes' THEN 1 
                        ELSE 0 
                    END) AS [Bikes]
            FROM
                [dbo].[vDMPrep] 
            GROUP BY
                [CustomerKey]
                ,[Region]
                ,[Age]
            ) AS [x]
        ON c.[CustomerKey] = x.[CustomerKey]
;
GO
PRINT N'Creating [dbo].[vAssocSeqLineItems]...';


GO

CREATE VIEW [dbo].[vAssocSeqLineItems]
AS
SELECT     OrderNumber, LineNumber, Model
FROM         dbo.vDMPrep
WHERE     (FiscalYear = '2013')
GO
PRINT N'Creating [dbo].[vAssocSeqOrders]...';


GO

/* vAssocSeqOrders supports assocation and sequence clustering data mmining models.
      - Limits data to FY2004.
      - Creates order case table and line item nested table.*/
CREATE VIEW [dbo].[vAssocSeqOrders]
AS
SELECT DISTINCT OrderNumber, CustomerKey, Region, IncomeGroup
FROM         dbo.vDMPrep
WHERE     (FiscalYear = '2013')
GO
PRINT N'Creating [dbo].[udfMinimumDate]...';


GO


CREATE FUNCTION [dbo].[udfMinimumDate] (
    @x DATETIME, 
    @y DATETIME
) RETURNS DATETIME
AS
BEGIN
    DECLARE @z DATETIME

    IF @x <= @y 
        SET @z = @x 
    ELSE 
        SET @z = @y

    RETURN(@z)
END;
GO
PRINT N'Creating [dbo].[udfTwoDigitZeroFill]...';


GO

-- Converts the specified integer (which should be < 100 and > -1)
-- into a two character string, zero filling from the left 
-- if the number is < 10.
CREATE FUNCTION [dbo].[udfTwoDigitZeroFill] (@number int) 
RETURNS char(2)
AS
BEGIN
	DECLARE @result char(2);
	IF @number > 9 
		SET @result = convert(char(2), @number);
	ELSE
		SET @result = convert(char(2), '0' + convert(varchar, @number));
	RETURN @result;
END;
GO
PRINT N'Creating [dbo].[udfBuildISO8601Date]...';


GO



-- ******************************************************
-- Create User Defined Functions
-- ******************************************************
-- Builds an ISO 8601 format date from a year, month, and day specified as integers.
-- This format of date should parse correctly regardless of SET DATEFORMAT and SET LANGUAGE.
-- See SQL Server Books Online for more details.
CREATE FUNCTION [dbo].[udfBuildISO8601Date] (@year int, @month int, @day int)
RETURNS datetime
AS 
BEGIN
	RETURN cast(convert(varchar, @year) + '-' + [dbo].[udfTwoDigitZeroFill](@month) 
	    + '-' + [dbo].[udfTwoDigitZeroFill](@day) + 'T00:00:00' 
	    as datetime);
END;
GO
PRINT N'Creating [dbo].[vTimeSeries]...';


GO


-- vTimeSeries view supports the creation of time series data mining models.
--      - Replaces earlier bike models with successor models.
--      - Abbreviates model names to improve readability in mining model viewer
--      - Concatenates model and region so that table only has one input.
--      - Creates a date field indexed to monthly reporting date for use in prediction.
CREATE VIEW [dbo].[vTimeSeries] 
AS
    SELECT 
        CASE [Model] 
            WHEN 'Mountain-100' THEN 'M200' 
            WHEN 'Road-150' THEN 'R250' 
            WHEN 'Road-650' THEN 'R750' 
            WHEN 'Touring-1000' THEN 'T1000' 
            ELSE Left([Model], 1) + Right([Model], 3) 
        END + ' ' + [Region] AS [ModelRegion] 
        ,(Convert(Integer, [CalendarYear]) * 100) + Convert(Integer, [Month]) AS [TimeIndex] 
        ,Sum([Quantity]) AS [Quantity] 
        ,Sum([Amount]) AS [Amount]
		,CalendarYear
		,[Month]
		,[dbo].[udfBuildISO8601Date] ([CalendarYear], [Month], 25)
		as ReportingDate
    FROM 
        [dbo].[vDMPrep] 
    WHERE 
        [Model] IN ('Mountain-100', 'Mountain-200', 'Road-150', 'Road-250', 
            'Road-650', 'Road-750', 'Touring-1000') 
    GROUP BY 
        CASE [Model] 
            WHEN 'Mountain-100' THEN 'M200' 
            WHEN 'Road-150' THEN 'R250' 
            WHEN 'Road-650' THEN 'R750' 
            WHEN 'Touring-1000' THEN 'T1000' 
            ELSE Left(Model,1) + Right(Model,3) 
        END + ' ' + [Region] 
        ,(Convert(Integer, [CalendarYear]) * 100) + Convert(Integer, [Month])
		,CalendarYear
		,[Month]
		,[dbo].[udfBuildISO8601Date] ([CalendarYear], [Month], 25);
GO
PRINT N'Creating [ddlDatabaseTriggerLog]...';


GO

CREATE TRIGGER [ddlDatabaseTriggerLog] ON DATABASE 
FOR DDL_DATABASE_LEVEL_EVENTS AS 
BEGIN
    SET NOCOUNT ON;

    DECLARE @data XML;
    DECLARE @schema sysname;
    DECLARE @object sysname;
    DECLARE @eventType sysname;

    SET @data = EVENTDATA();
    SET @eventType = @data.value('(/EVENT_INSTANCE/EventType)[1]', 'sysname');
    SET @schema = @data.value('(/EVENT_INSTANCE/SchemaName)[1]', 'sysname');
    SET @object = @data.value('(/EVENT_INSTANCE/ObjectName)[1]', 'sysname') 

    IF @object IS NOT NULL
        PRINT '  ' + @eventType + ' - ' + @schema + '.' + @object;
    ELSE
        PRINT '  ' + @eventType + ' - ' + @schema;

    IF @eventType IS NULL
        PRINT CONVERT(nvarchar(max), @data);

    INSERT [dbo].[DatabaseLog] 
        (
        [PostTime], 
        [DatabaseUser], 
        [Event], 
        [Schema], 
        [Object], 
        [TSQL], 
        [XmlEvent]
        ) 
    VALUES 
        (
        GETDATE(), 
        CONVERT(sysname, CURRENT_USER), 
        @eventType, 
        CONVERT(sysname, @schema), 
        CONVERT(sysname, @object), 
        @data.value('(/EVENT_INSTANCE/TSQLCommand)[1]', 'nvarchar(max)'), 
        @data
        );
END;
GO
DISABLE TRIGGER [ddlDatabaseTriggerLog]
    ON DATABASE;


GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
